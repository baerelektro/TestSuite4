"""
    This file is part of TON OS.

    TON OS is free software: you can redistribute it and/or modify
    it under the terms of the Apache License 2.0 (http://www.apache.org/licenses/)

    Copyright 2019-2021 (c) TON LABS
"""

'''

    This tutorial demonstrates how to call signed methods
    and shows how to handle errors generated by a contract
    В этом руководстве показано, как вызывать подписанные методы.
    и показывает, как обрабатывать ошибки, порожденные контрактом.

'''


import tonos_ts4.ts4 as ts4

eq = ts4.eq


class Tut06(ts4.BaseContract):
    def __init__(self):
        # Create a keypair
        # Создать пару ключей
        keypair = ts4.make_keypair()
        # ... and pass it to the constructor to identify the contract owner
        # ... и передать его конструктору для идентификации владельца контракта
        super(Tut06, self).__init__('tutorial06', {}, keypair = keypair)

    # Create a method to call setNumber without the owner's signature
    # Создать метод для вызова setNumber без подписи владельца
    def setNumber(self, value, expect_ec = 0):
        return self.call_method('setNumber', {'value': value}, expect_ec = expect_ec)

    # Create a method to call setNumber with the owner's signature
    # Создать метод для вызова setNumber с подписью владельца
    def setNumber_signed(self, value, expect_ec = 0):
        return self.call_method_signed('setNumber', {'value': value}, expect_ec = expect_ec)


# Initialize TS4 by specifying where the artifacts of the used contracts are located
# verbose: toggle to print additional execution info
# Инициализировать TS4, указав, где находятся артефакты используемых контрактов
# verbose: переключить на печать дополнительной информации о выполнении
ts4.init('contracts/', verbose = True)

# Deploy a contract
# Развернуть контракт
tut06 = Tut06()

t_number = 123

# Call the unsigned method and expect an error because
# the owner's key is not specified and its validation failed
# Вызвать беззнаковый метод и ожидать ошибки, потому что
# ключ владельца не указан и его проверка не удалась
tut06.setNumber(t_number, expect_ec = 101)

# Check that the value has not been changed
# Убедитесь, что значение не было изменено
assert eq(0, tut06.call_getter('m_number'))

# Сall the method by message that signed with owner key
# Вызвать метод по сообщению, подписанному ключом владельца
tut06.setNumber_signed(t_number)

# Check that the value has changed
# Убедитесь, что значение изменилось
assert eq(t_number, tut06.call_getter('m_number'))

# Set a new keypair in the contract that is different
# from the one that the contract was deployed with
# Установите новую пару ключей в контракте, которая отличается
# из того, с которым был развернут контракт
(tut06.private_key_, tut06.public_key_) = ts4.make_keypair()

# Сall the method by message that signed with foreign key
# and expect an error because the owner's key validation failed
# Вызвать метод по сообщению, подписанному внешним ключом
# и ожидаем ошибки, потому что проверка ключа владельца не удалась
tut06.setNumber_signed(t_number * 2, expect_ec = 101)

# Check that the value has not changed
# Убедитесь, что значение не изменилось
assert eq(t_number, tut06.call_getter('m_number'))
